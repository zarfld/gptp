{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Check WPCAP_DIR environment",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-Command",
          "echo WPCAP_DIR is: $env:WPCAP_DIR"
        ]
      },
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Check CMake version",
      "type": "shell",
      "windows": {
        "command": "cmake",
        "args": [
          "--version"
        ]
      },
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Configure project",
      "type": "shell",
      "windows": {
        "command": "cmake",
        "args": [
          "-B",
          "build",
          "-DCMAKE_BUILD_TYPE=Release"
        ]
      },
      "dependsOn": [
        "Check WPCAP_DIR environment",
        "Check CMake version"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Build project",
      "type": "shell",
      "windows": {
        "command": "cmake",
        "args": [
          "--build",
          "build",
          "--config",
          "Release"
        ]
      },
      "dependsOn": [
        "Configure project"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Configure Debug",
      "type": "shell",
      "windows": {
        "command": "cmake",
        "args": [
          "-B",
          "build",
          "-DCMAKE_BUILD_TYPE=Debug"
        ]
      },
      "dependsOn": [
        "Check WPCAP_DIR environment",
        "Check CMake version"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Build project Debug",
      "type": "shell",
      "windows": {
        "command": "cmake",
        "args": [
          "--build",
          "build",
          "--config",
          "Debug"
        ]
      },
      "dependsOn": [
        "Configure Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Debug gptp",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-Command",
          "$mac = (Get-NetAdapter | Where-Object { $_.InterfaceDescription -like ''*I21*'' } | Select-Object -First 1 -ExpandProperty MacAddress);",
          "& 'build\\Debug\\gptp.exe' $mac -debug-packets"
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Debug gptp with Milan (Admin) - Run as Administrator",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-File",
          "run_admin_milan.ps1"
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Debug gptp with Automotive (Admin) - Run as Administrator",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-File",
          "run_admin_automotive.ps1"
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Debug gptp with Milan (Admin) - STABLE MODE",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-File",
          "run_admin_milan_stable.ps1"
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Debug gptp with Automotive (Admin) - STABLE MODE",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-File",
          "run_admin_automotive_stable.ps1"
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "View Latest gptp Log",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-Command",
          "$latestLog = Get-ChildItem -Path 'build\\Debug\\gptp*.log' -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($latestLog) { Write-Host \"=== Latest gptp log file: $($latestLog.Name) (Size: $([math]::Round($latestLog.Length/1KB, 2)) KB) ===\"; Write-Host ''; Get-Content $latestLog.FullName | Select-Object -Last 100; Write-Host ''; Write-Host '=== End of log (last 100 lines) ==='; } else { Write-Host 'No gptp log files found in build\\Debug\\'; Get-ChildItem -Path 'build\\Debug\\' | Where-Object { $_.Name -like '*gptp*' } | Format-Table Name, Length, LastWriteTime; }"
        ]
      },
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Clean gptp Logs",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy",
          "Bypass",
          "-Command",
          "Write-Host 'Cleaning up all gptp log files...'; $logFiles = Get-ChildItem -Path 'build\\Debug\\gptp*.log', 'build\\Debug\\gptp*.err' -ErrorAction SilentlyContinue; if ($logFiles) { $logFiles | ForEach-Object { Write-Host \"Removing: $($_.Name)\"; Remove-Item $_.FullName -Force; }; Write-Host \"Cleaned up $($logFiles.Count) log files.\"; } else { Write-Host 'No log files found to clean up.'; }"
        ]
      },
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Detect MAC Address",
      "type": "shell",
      "windows": {
        "command": "powershell",
        "args": [
          "-NoProfile",
          "-ExecutionPolicy", "Bypass",
          "-Command",
          "$mac = (Get-NetAdapter | Where-Object { $_.InterfaceDescription -like '*I21*' } | Select-Object -First 1 -ExpandProperty MacAddress); if (-not $mac) { Write-Host 'ERROR: No I21* network adapter found'; $mac = '00:11:22:33:44:55'; Write-Host 'Using fallback MAC: $mac'; } else { Write-Host \"Detected MAC address: $mac\"; } $mac | Out-File -FilePath 'build\\Debug\\detected_mac.txt' -Encoding ASCII -NoNewline; Write-Host \"MAC address saved to build\\Debug\\detected_mac.txt\""
        ]
      },
      "dependsOn": [
        "Build project Debug"
      ],
      "group": "build",
      "problemMatcher": []
    }
  ]
}
